{"version":3,"file":"copy-base.js","sourceRoot":"","sources":["../../../build/src/app/copy/copy-base.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,YAAY,EACZ,KAAK,EACL,MAAM,GACP,MAAM,eAAe,CAAC;AAKvB;;GAEG;AACH;IA4BE;;OAEG;IACH,kBAAsB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QApB9C;;WAEG;QACwB,qBAAgB,GAAW,KAAK,CAAC;QAO5D;;WAEG;QACe,WAAM,GAA4B,IAAI,YAAY,EAAE,CAAC;QAE/D,oBAAe,GAAY,KAAK,CAAC;IAKQ,CAAC;IAOlD,sBAAI,oCAAc;QALlB;;;;WAIG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;;;OAAA;IAED;;OAEG;IACH,uBAAI,GAAJ;QAAA,iBAWC;QAVC,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;aACL,CAAC,CAAC;YAChB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,UAAU,CAAC;gBACT,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YAC/B,CAAC,EAAE,IAAI,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IApDyB;QAAzB,KAAK,CAAC,iBAAiB,CAAC;;qDAAyB;IAKhC;QAAjB,KAAK,CAAC,SAAS,CAAC;;6CAAiB;IAKP;QAA1B,KAAK,CAAC,kBAAkB,CAAC;;sDAAkC;IAK5C;QAAf,KAAK,CAAC,OAAO,CAAC;;2CAAe;IAKZ;QAAjB,MAAM,CAAC,QAAQ,CAAC;kCAAS,YAAY;4CAAiC;IAiCzE,eAAC;CAAA,AAzDD,IAyDC;SAzDqB,QAAQ","sourcesContent":["import {\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\n\nimport { CopyEvent } from './copy-event';\nimport { CopyService } from './copy-service/copy.service';\n\n/**\n * A config containing properties for copy components\n */\nexport abstract class CopyBase {\n  /**\n   * Copy button aria label (announced to screen readers)\n   */\n  @Input('buttonAriaLabel') buttonAriaLabel: string;\n\n  /**\n   * A tooltip that describes the value to be copied\n   */\n  @Input('tooltip') tooltip: string;\n\n  /**\n   * Placement for the tooltip\n   */\n  @Input('tooltipPlacement') tooltipPlacement: string = 'top';\n\n  /**\n   * The value to be copied to the clipboard\n   */\n  @Input('value') value: string;\n\n  /**\n   * Event emitted when values are copied to the clipboard\n   */\n  @Output('onCopy') onCopy: EventEmitter<CopyEvent> = new EventEmitter();\n\n  private _recentlyCopied: boolean = false;\n\n  /**\n   * Default constructor\n   */\n  constructor(protected copyService: CopyService) {}\n\n  /**\n   * Returns the flag indicating copy action has just happened\n   *\n   * @returns {boolean} True if copy action has been triggered\n   */\n  get recentlyCopied(): boolean {\n    return this._recentlyCopied;\n  }\n\n  /**\n   * Copy given value to the clipboard\n   */\n  copy(): void {\n    let result = this.copyService.copy(this.value);\n    if (result) {\n      this.onCopy.emit({\n        value: this.value\n      } as CopyEvent);\n      this._recentlyCopied = true;\n      setTimeout(() => {\n        this._recentlyCopied = false;\n      }, 3000);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}